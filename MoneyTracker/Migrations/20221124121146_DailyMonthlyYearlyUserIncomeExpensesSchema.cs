using Microsoft.EntityFrameworkCore.Migrations;

#nullable disable

namespace MoneyTracker.Migrations
{
    /// <inheritdoc />
    public partial class DailyMonthlyYearlyUserIncomeExpensesSchema : Migration
    {
        /// <inheritdoc />
        protected override void Up(MigrationBuilder migrationBuilder)
        {
            migrationBuilder.Sql(
                "IF OBJECT_ID (N'AllDates', 'U') IS NOT NULL\r\nBEGIN\r\n\tDROP TABLE AllDates\r\nEND\r\nGO\r\nCREATE TABLE AllDates (\r\n\td datetime2 primary key\r\n)\r\nGO\r\n;with StartDate as \r\n(\r\n\tSELECT CAST('20220101' as date) as StartDate\r\n),\r\nCutoffDate as\r\n(\r\n\tSELECT DATEADD(DAY, -1, DATEADD(YEAR, 30, (SELECT StartDate from StartDate))) as CutoffDate\r\n),\r\nseq(n) as\r\n(\r\n\tselect 0 union all select n + 1 from seq\r\n\twhere n < datediff(day, (SELECT StartDate from StartDate), (SELECT CutoffDate from CutoffDate))\r\n),\r\nd(d) as \r\n(\r\n\tselect Dateadd(day, n, (SELECT StartDate from StartDate)) from seq\r\n)\r\nINSERT into AllDates (d)\r\nselect \r\n\tcAST(d as datetime2)\r\nfrom d\r\noption (maxrecursion 0)\r\nGO\r\nIF OBJECT_ID(N'DailyUserData', 'V') IS NOT NULL\r\n\tDROP VIEW DailyUserData\r\nGO\r\nCREATE VIEW DailyUserData as\r\nwith expenses as (\r\n\tselect \r\n\t\td.d as 'Date',\r\n\t\tCOALESCE(cAST(SUM(e.Value) as real), 0) as 'DailyExpense',\r\n\t\tu.Id\r\n\tfrom AllDates d\r\n\t\tCROSS JOIN AspNetUsers u\r\n\t\tLEFT JOIN Expense e on e.DateOfExpense >= d.d AND e.DateOfExpense < DATEADD(DAY, 1, d.d) AND e.OwnerId = u.Id\r\n\tGROUP BY d.d, u.Id\r\n),\r\nincomes as (\r\n\tselect \r\n\t\td.d as 'Date',\r\n\t\tCOALESCE(cAST(SUM(i.Value) as real), 0) as 'DailyIncome',\r\n\t\tu.Id\r\n\tfrom AllDates d\r\n\t\tCROSS JOIN AspNetUsers u\r\n\t\tLEFT JOIN Income i on i.Date >= d.d AND i.Date < DATEADD(DAY, 1, d.d) AND i.OwnerId = u.Id\r\n\tGROUP BY d.d, u.Id\r\n)\r\nSELECT e.date,e.DailyExpense, i.DailyIncome,e.Id FROM expenses e JOIN incomes i on e.Date = i.Date and e.Id = i.Id\r\nGO\r\nIF OBJECT_ID (N'AllMonths', 'U') IS NOT NULL\r\nBEGIN\r\n\tDROP TABLE AllMonths\r\nEND\r\nCREATE TABLE AllMonths (\r\n\tm datetime2 primary key\r\n)\r\nGO\r\n;with StartDate as \r\n(\r\n\tSELECT CAST('20220101' as date) as StartDate\r\n),\r\nCutoffDate as\r\n(\r\n\tSELECT DATEADD(DAY, -1, DATEADD(YEAR, 30, (SELECT StartDate from StartDate))) as CutoffDate\r\n),\r\nseq(n) as\r\n(\r\n\tselect 0 union all select n + 1 from seq\r\n\twhere n < datediff(month, (SELECT StartDate from StartDate), (SELECT CutoffDate from CutoffDate))\r\n),\r\nm(m) as \r\n(\r\n\tselect Dateadd(month, n, (SELECT StartDate from StartDate)) from seq\r\n)\r\nINSERT into AllMonths (m)\r\nselect \r\n\tcAST(m as datetime2)\r\nfrom m\r\noption (maxrecursion 0)\r\nGO\r\nIF OBJECT_ID(N'MonthlyUserData', 'V') IS NOT NULL\r\n\tDROP VIEW MonthlyUserData\r\nGO\r\nCREATE VIEW MonthlyUserData as\r\nwith expenses as\r\n(\r\n\tselect \r\n\t\tm.m as 'Date',\r\n\t\tCOALESCE(cAST(SUM(e.Value) as real), 0) as 'MonthlyExpense',\r\n\t\tu.Id\r\n\tfrom AllMonths m\r\n\t\tCROSS JOIN AspNetUsers u\r\n\t\tLEFT JOIN Expense e on e.DateOfExpense >= m.m AND e.DateOfExpense < DATEADD(month, 1, m.m) AND e.OwnerId = u.Id\r\n\tGROUP by m.m,u.id\r\n),\r\nincomes as \r\n(\r\n\tselect \r\n\t\tm.m as 'Date',\r\n\t\tCOALESCE(cAST(SUM(i.Value) as real), 0) as 'MonthlyIncome',\r\n\t\tu.Id\r\n\tfrom AllMonths m\r\n\t\tCROSS JOIN AspNetUsers u\r\n\t\tLEFT JOIN Income i on i.Date >= m.m AND i.Date < DATEADD(month, 1, m.m) AND i.OwnerId = u.Id\r\n\tGROUP by m.m,u.id\r\n)\r\nSELECT e.date,e.MonthlyExpense, i.MonthlyIncome,e.Id FROM expenses e JOIN incomes i on e.Date = i.Date and e.Id = i.Id\r\nGO\r\nIF OBJECT_ID (N'AllYears', 'U') IS NOT NULL\r\nBEGIN\r\n\tDROP TABLE AllYears\r\nEND\r\nCREATE TABLE AllYears (\r\n\ty datetime2 primary key\r\n)\r\nGO\r\n;with StartDate as \r\n(\r\n\tSELECT CAST('20220101' as date) as StartDate\r\n),\r\nCutoffDate as\r\n(\r\n\tSELECT DATEADD(DAY, -1, DATEADD(YEAR, 30, (SELECT StartDate from StartDate))) as CutoffDate\r\n),\r\nseq(n) as\r\n(\r\n\tselect 0 union all select n + 1 from seq\r\n\twhere n < datediff(year, (SELECT StartDate from StartDate), (SELECT CutoffDate from CutoffDate))\r\n),\r\ny(y) as \r\n(\r\n\tselect Dateadd(year, n, (SELECT StartDate from StartDate)) from seq\r\n)\r\nINSERT into AllYears (y)\r\nselect \r\n\tcAST(y as datetime2)\r\nfrom y\r\noption (maxrecursion 0)\r\nGO\r\nIF OBJECT_ID(N'YearlyUserData', 'V') IS NOT NULL\r\n\tDROP VIEW YearlyUserData\r\nGO\r\nCREATE VIEW YearlyUserData as\r\nwith expenses as\r\n(\r\n\tselect \r\n\t\ty.y as 'Date',\r\n\t\tCOALESCE(cAST(SUM(e.Value) as real), 0) as 'YearlyExpense',\r\n\t\tu.Id\r\n\tfrom AllYears y\r\n\t\tCROSS JOIN AspNetUsers u\r\n\t\tLEFT JOIN Expense e on e.DateOfExpense >= y.y AND e.DateOfExpense < DATEADD(year, 1, y.y) AND e.OwnerId = u.Id\r\n\tGROUP by y.y,u.id\r\n),\r\nincomes as \r\n(\r\n\tselect \r\n\t\ty.y as 'Date',\r\n\t\tCOALESCE(cAST(SUM(i.Value) as real), 0) as 'YearlyIncome',\r\n\t\tu.Id\r\n\tfrom AllYears y\r\n\t\tCROSS JOIN AspNetUsers u\r\n\t\tLEFT JOIN Income i on i.Date >= y.y AND i.Date < DATEADD(year, 1, y.y) AND i.OwnerId = u.Id\r\n\tGROUP by y.y,u.id\r\n)\r\nSELECT e.date,e.YearlyExpense, i.YearlyIncome,e.Id FROM expenses e JOIN incomes i on e.Date = i.Date and e.Id = i.Id\r\nGO\r\n"
                );
        }

        /// <inheritdoc />
        protected override void Down(MigrationBuilder migrationBuilder)
        {
            migrationBuilder.Sql(
                "IF OBJECT_ID (N'AllDates', 'U') IS NOT NULL\r\nBEGIN\r\n\tDROP TABLE AllDates\r\nEND\r\nIF OBJECT_ID(N'DailyUserData', 'V') IS NOT NULL\r\n\tDROP VIEW DailyUserData\r\nGO\r\nIF OBJECT_ID (N'AllMonths', 'U') IS NOT NULL\r\nBEGIN\r\n\tDROP TABLE AllMonths\r\nEND\r\nIF OBJECT_ID(N'MonthlyUserData', 'V') IS NOT NULL\r\n\tDROP VIEW MonthlyUserData\r\nGO\r\nIF OBJECT_ID (N'AllYears', 'U') IS NOT NULL\r\nBEGIN\r\n\tDROP TABLE AllYears\r\nEND\r\nIF OBJECT_ID(N'YearlyUserData', 'V') IS NOT NULL\r\n\tDROP VIEW YearlyUserData\r\nGO"
                );
        }
    }
}
