@using System.Web;
@using Newtonsoft.Json;
@model MoneyTracker.Models.UserDashboard
@{
    ViewData["Title"] = "Index";
    var x = 0;
    string popoverBody = "Monthly data is calculated from your chosen day of cycle reset to the same day in next month. Your chosen day is - " + ViewBag.DayOfCycleReset.ToString();
}

<div class="container">
    <div class="row pt-4">
        <div class="col-lg-6">
            <h2 class="text-primary">Dashboard</h2>
        </div>
    </div>
    <div class="row pt-4">
        <div class="col-lg-6">
            <h3>Recent expenses:</h3>
            <table class="table table-bordered table-striped" style="width:100%">
                <thead>
                    <tr>
                        <th>
                            Description
                        </th>
                        <th>
                            Value
                        </th>
                        <th>
                            Date of expense
                        </th>
                    </tr>
                </thead>
                <tbody>
                    @foreach (var item in Model.RecentExpenses)
                    {
                        <tr>
                            <td width="40%">
                                @Html.DisplayFor(modelItem => item.Description)
                            </td>
                            <td width="20%">
                                @Html.DisplayFor(modelItem => item.Value)
                            </td>
                            <td width="40%">
                                @Html.DisplayFor(modelItem => item.DateOfExpense)
                            </td>
                        </tr>
                    }
                </tbody>
            </table>
        </div>
        <div class="col-lg-6">
            <div class="row">
                <div class="col-4">
                    <h3>This month:</h3>
                </div>
                <div class="col-6">
                    <ul class="nav nav-tabs" role="tablist">
                        <li class="nav-item" role="presentation">
                            <a class="nav-link active" data-bs-toggle="tab" href="#dailyBarGraph" aria-selected="true" role="tab">Daily</a>
                        </li>
                        <li class="nav-item" role="presentation">
                            <a class="nav-link" data-bs-toggle="tab" href="#categoryPieChart" aria-selected="false" role="tab" tabindex="-1">Category</a>
                        </li>
                    </ul>
                </div>
                <div id="myTabContent" class="tab-content">
                    <div class="tab-pane fade active show" id="dailyBarGraph" role="tabpanel">
                        <div class="card" style="background-color: #0D3640">
                            <canvas id="dailyChart"></canvas>
                        </div>
                    </div>
                    <div class="tab-pane fade" id="categoryPieChart" role="tabpanel">
                        <canvas id="chartJSContainer"></canvas>
                    </div>
                </div>
            </div>
        </div>
    </div>
    <div class="row pt-4">
        <div class="col-lg-6">
            <h3>Recent months:</h3>
            <table class="table table-bordered table-striped table-sm" style="width:100%">
                <thead>
                    <tr>
                        <th>
                            Month
                        </th>
                        <th>
                            Income
                        </th>
                        <th>
                            Expense
                        </th>
                        <th>
                            Total
                        </th>
                    </tr>
                </thead>
                <tbody>
                    @foreach (var item in Model.MonthlyUserData)
                    {
                        if (item.Date.Month == ViewBag.RecentMonths[x])
                        {

                            <tr>
                                <td width="10%">
                                    @Html.DisplayFor(modelItem => item.Date.Month)
                                </td>
                                <td width="20%">
                                    @Html.DisplayFor(modelItem => item.MonthlyIncome)
                                </td>
                                <td width="20%">
                                    @Html.DisplayFor(modelItem => item.MonthlyExpense)
                                </td>
                                <td width="20%">
                                    @ViewBag.RecentMonthsTotal[x]
                                </td>
                            </tr>
                        }
                        x++;
                    }
                </tbody>
            </table>
        </div>
        <div class="col-lg-6">
            <h3>This year:</h3>
            <div class="card" style="background-color: #0D3640">
                <canvas id="monthlyChart"></canvas>
            </div>
        </div>
    </div>
    <div class="row">
        <div class="col-lg-6">
        </div>
        <div class="col-lg-6">
            @foreach (var item in Model.YearlyUserData)
            {
                <div class="row pl">
                    This year: 
                </div>
                <div class="row">
                    Income 
                    @Html.DisplayFor(modelItem => item.YearlyIncome)
                    Expense:
                    @Html.DisplayFor(modelItem => item.YearlyExpense)
                    Total:
                    @ViewBag.YearlyTotal
                </div>
            }
        </div>
    </div>
</div>
@section Scripts {
    <script src="https://cdn.jsdelivr.net/npm/chart.js"></script>
    <script>
        var jsonStringDaily = "@ViewBag.DailyUserDataJson";
        var formatedJsonStringDaily = jsonStringDaily.replaceAll("&amp;", "").replaceAll("&quot;", "\"").replaceAll(",", ", ");

        var parsedJsonDaily = [];
        parsedJsonDaily = JSON.parse(formatedJsonStringDaily);

        let labelsArrayDaily = [];
        let datasetDataArrayDaily = [];
        for (var i = 0; i < parsedJsonDaily.length; i++) {
            var dailyExpense = parsedJsonDaily[i];
            var date = new Date(dailyExpense.Date);
            var day = date.getDate();
            var month = date.getMonth() + 1;
            var string = "" + day + "." + month + ".";
            labelsArrayDaily.push(string);
            datasetDataArrayDaily.push(dailyExpense.DailyExpense);
        }
        const ctx = document.getElementById("dailyChart").getContext('2d');
        Chart.defaults.color = '#000';
        const dailyChart = new Chart(ctx, {
            type: 'bar',
            data: {
                labels: labelsArrayDaily,
                datasets: [{
                    label: 'Daily expenses',
                    backgroundColor: '#839496',
                    borderColor: '#839496',
                    data: datasetDataArrayDaily
                }]
            },
            options: {
                responsive: true,
                maintainAspectRatio: false,
                scales: {
                  y: {
                    ticks: { color: '#fff'}
                  },
                  x: {
                    ticks: { color: "#fff" }
                  }
                },
                plugins: {
                    legend: {
                        labels: {
                            color: '#fff'
                        }
                    }
                }
            } 
        });



        var jsonStringMonthly = "@ViewBag.MonthlyUserDataJson";
        var formatedJsonStringMonthly = jsonStringMonthly.replaceAll("&amp;", "").replaceAll("&quot;", "\"").replaceAll(",", ", ");
        var parsedJsonMonthly = [];
        parsedJsonMonthly = JSON.parse(formatedJsonStringMonthly);

        let labelsArrayMonthly = [];
        let datasetDataArrayIncomeMonthly = [];
        let datasetDataArrayExpenseMonthly = [];
        for (var i = parsedJsonMonthly.length - 1; i >= 0; i--) {
            var monthlyExpense = parsedJsonMonthly[i];
            var date = new Date(monthlyExpense.Date);
            var month = date.getMonth() + 1;
            var year = date.getYear() - 100;
            var string = "" + month + "." + year + ".";
            labelsArrayMonthly.push(string);
            datasetDataArrayExpenseMonthly.push(monthlyExpense.MonthlyExpense);
            datasetDataArrayIncomeMonthly.push(monthlyExpense.MonthlyIncome);
        }
        const ctx2 = document.getElementById("monthlyChart").getContext('2d');
        const monthlyChart = new Chart(ctx2, {
            type: 'bar',
            data: {
                labels: labelsArrayMonthly,
                datasets: [{
                    label: 'Monthly expenses',
                    backgroundColor: '#839496',
                    borderColor: '#839496',
                    data: datasetDataArrayExpenseMonthly,
                }, {
                    label: 'Monthly income',
                    backgroundColor: '#ff0000',
                    borderColor: '#ff0000',
                    data: datasetDataArrayIncomeMonthly,
                }]
            },
            options: {
                responsive: true,
                maintainAspectRatio: false,
                scales: {
                    y: {
                        ticks: { color: '#fff' }
                    },
                    x: {
                        ticks: { color: "#fff" }
                    }
                },
                plugins: {
                    legend: {
                        labels: {
                            color: '#fff'
                        }
                    }
                }
            }
        });

        let colors = [
            '#C0392B',
            '#9B59B6',
            '#2980B9',
            '#1ABC9C',
            '#27AE60',
            '#F1C40F',
            '#E67E22',
            '#ECF0F1',
            '#95A5A6',
            '#34495E',
            '#E74C3C',
            '#8E44AD',
            '#3498DB',
            '#16A085',
            '#2ECC71',
            '#F39C12',
            '#D35400',
            '#BDC3C7',
            '#7F8C8D',
            '#2C3E50',
            '#4e8cb4',
            '#543557',
            '#fb9631',
            '#fb9631',
            '#0aac41',
            '#e69f65',
            '#e69f65',
            '#10ecab',
            '#38afa4',
            '#b65bb2',
            '#0cd41d',
            '#e85729',
            '#a6141c',
            '#258fc8',
            '#f96b95',
            '#C0392B',
            '#9B59B6',
            '#2980B9',
            '#1ABC9C',
            '#27AE60',
            '#F1C40F',
            '#E67E22',
            '#ECF0F1',
            '#95A5A6',
            '#34495E',
            '#E74C3C',
            '#8E44AD',
            '#3498DB',
            '#16A085',
            '#2ECC71',
            '#F39C12',
            '#D35400',
            '#BDC3C7',
            '#7F8C8D',
            '#2C3E50',
            '#4e8cb4',
            '#543557',
            '#fb9631',
            '#fb9631',
            '#0aac41',
            '#e69f65',
            '#e69f65',
            '#10ecab',
            '#38afa4',
            '#b65bb2',
            '#0cd41d',
            '#e85729',
            '#a6141c',
            '#258fc8',
            '#f96b95',
            '#C0392B',
            '#9B59B6',
            '#2980B9',
            '#1ABC9C',
            '#27AE60',
            '#F1C40F',
            '#E67E22',
            '#ECF0F1',
            '#95A5A6',
            '#34495E',
            '#E74C3C',
            '#8E44AD',
            '#3498DB',
            '#16A085',
            '#2ECC71',
            '#F39C12',
            '#D35400',
            '#BDC3C7',
            '#7F8C8D',
            '#2C3E50',
            '#4e8cb4',
            '#543557',
            '#fb9631',
            '#fb9631',
            '#0aac41',
            '#e69f65',
            '#e69f65',
            '#10ecab',
            '#38afa4',
            '#b65bb2',
            '#0cd41d',
            '#e85729',
            '#a6141c',
            '#258fc8',
            '#f96b95'
        ]

        var categoryNames = @Html.Raw(JsonConvert.SerializeObject(ViewBag.categoryNames));
        var categoryExpenseSums = @Html.Raw(JsonConvert.SerializeObject(ViewBag.categoryExpenseSums));

        var subCategoryNames = @Html.Raw(JsonConvert.SerializeObject(ViewBag.SubCategoryNames));
        var subCategoryExpenseSums = @Html.Raw(JsonConvert.SerializeObject(ViewBag.subCategoryExpenseSums));

        var subCategoryCategories = [];
        var sum = 0;
        var categoryPointer = 0;
        for (var i = 0; i <= subCategoryNames.length; i++) {
            subCategoryCategories[i] = categoryNames[categoryPointer];
            sum += subCategoryExpenseSums[i];
            if (sum == categoryExpenseSums[categoryPointer])
            {
                categoryPointer++;
                sum = 0;
            }
        }

        var categoryColors = [];
        for (var i = 0; i < categoryNames.length; i++) {
            categoryColors[i] = colors[i];
        }

        var subCategoryColors = [];
        for (var i = 0; i < subCategoryNames.length; i++) {
            subCategoryColors[i] = colors[i + 10];
        }

        new Chart('chartJSContainer', {
            type: 'pie',
            data: {
                labels: categoryNames,
                datasets: [{
                    data: categoryExpenseSums,
                    backgroundColor: categoryColors
                },
                {
                    data: subCategoryExpenseSums,
                    backgroundColor: subCategoryColors,
                    datalabels: subCategoryNames
                }
                ]
            },
            options: {
                responsive: false,
                plugins: {
                    legend: {
                        labels: {
                            generateLabels: chart => chart.data.labels.map((l, i) => ({
                                text: l,
                                index: i,
                                fillStyle: chart.data.datasets[0].backgroundColor[i],
                                strokeStyle: chart.data.datasets[0].backgroundColor[i],
                                fontColor: 'white',
                                hidden: chart.getDatasetMeta(0).data[i].hidden
                            })),
                        },
                        onClick: (event, legendItem, legend) => {
                            let chart = legend.chart;
                            let hidden = !chart.getDatasetMeta(0).data[legendItem.index].hidden;
                            chart.getDatasetMeta(0).data[legendItem.index].hidden = hidden;
                            let pointer = 0;
                            chart.data.datasets[0].data.forEach((v, i) => {
                                while (v > 0) {
                                    if (i == legendItem.index) {
                                        chart.getDatasetMeta(1).data[pointer].hidden = hidden;
                                    }
                                    v -= subCategoryExpenseSums[pointer++];
                                }
                            });
                            chart.update();
                        }
                    },
                    tooltip: {
                        callbacks: {
                            title: function (context) {
                                if (context[0].datasetIndex == 0) return null;
                                if (context[0].datasetIndex == 1) return subCategoryCategories[context[0].dataIndex];
                            },
                            label: function (context) {
                                if (context.datasetIndex == 0) return categoryNames[context.dataIndex] + ': ' + context.formattedValue;
                                if (context.datasetIndex == 1) return subCategoryNames[context.dataIndex] + ': ' + context.formattedValue;
                            }
                        }
                    }
                }
            }
        });
        
        
        
        /*
        const data = {
          labels: ['Overall Yay', 'Overall Nay', 'Test', 'Group A Nay', 'Group B Yay', 'Group B Nay', 'Group C Yay', 'Group C Nay'],
          datasets: [
            {
              backgroundColor: ['#AAA', '#777'],
              data: [21, 79]
            },
            {
              backgroundColor: ['#000', 'hsl(0, 100%, 35%)'],
              data: [33, 67]
            },
            {
              backgroundColor: ['hsl(100, 100%, 60%)', 'hsl(100, 100%, 35%)'],
              data: [20, 80]
            },
            {
              backgroundColor: ['hsl(180, 100%, 60%)', 'hsl(180, 100%, 35%)'],
              data: [10, 90]
            }
          ]
        };
        const config = {
            type: 'pie',
            data: data,
            options: {
                responsive: true,
                plugins: {
                    legend: {
                        labels: {
                            generateLabels: function (chart) {
                                // Get the default label list
                                const original = Chart.overrides.pie.plugins.legend.labels.generateLabels;
                                const labelsOriginal = original.call(this, chart);

                                // Build an array of colors used in the datasets of the chart
                                let datasetColors = chart.data.datasets.map(function (e) {
                                    return e.backgroundColor;
                                });
                                datasetColors = datasetColors.flat();

                                // Modify the color and hide state of each label
                                labelsOriginal.forEach(label => {
                                    // There are twice as many labels as there are datasets. This converts the label index into the corresponding dataset index
                                    label.datasetIndex = (label.index - label.index % 2) / 2;

                                    // The hidden state must match the dataset's hidden state
                                    label.hidden = !chart.isDatasetVisible(label.datasetIndex);

                                    // Change the color to match the dataset
                                    label.fillStyle = datasetColors[label.index];
                                });

                                return labelsOriginal;
                            }
                        },
                        onClick: function (mouseEvent, legendItem, legend) {
                            // toggle the visibility of the dataset from what it currently is
                            legend.chart.getDatasetMeta(
                                legendItem.datasetIndex
                            ).hidden = legend.chart.isDatasetVisible(legendItem.datasetIndex);
                            legend.chart.update();
                        }
                    },
                    tooltip: {
                        callbacks: {
                            label: function (context) {
                                return context.datasetIndex + ': ' + context.dataIndex;
                            }
                        }
                    }
                }
            },
        };
        const ctx4 = document.getElementById("categoryPieChart").getContext('2d');
        const categoryChart = new Chart(ctx4, config);*/
    </script>
}