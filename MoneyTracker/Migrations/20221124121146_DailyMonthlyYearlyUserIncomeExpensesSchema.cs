using Microsoft.EntityFrameworkCore.Migrations;

#nullable disable

namespace MoneyTracker.Migrations
{
    /// <inheritdoc />
    public partial class DailyMonthlyYearlyUserIncomeExpensesSchema : Migration
    {
        /// <inheritdoc />
        protected override void Up(MigrationBuilder migrationBuilder)
        {
            migrationBuilder.Sql(
                "IF OBJECT_ID (N'AllDates', 'U') IS NOT NULL\nBEGIN\n    DROP TABLE AllDates;\nEND\nGO\nCREATE TABLE AllDates (\n    d datetime2 primary key\n)\nGO\n;with StartDate as \n(\n    SELECT CAST('20220101' as date) as StartDate\n),\nCutoffDate as\n(\n    SELECT DATEADD(DAY, -1, DATEADD(YEAR, 30, (SELECT StartDate from StartDate))) as CutoffDate\n),\nseq(n) as\n(\n    select 0 union all select n + 1 from seq\n    where n < datediff(day, (SELECT StartDate from StartDate), (SELECT CutoffDate from CutoffDate))\n),\nd(d) as \n(\n    select Dateadd(day, n, (SELECT StartDate from StartDate)) from seq\n)\nINSERT into AllDates (d)\nselect \n    cAST(d as datetime2)\nfrom d\noption (maxrecursion 0)\nGO\nIF OBJECT_ID(N'DailyUserData', 'V') IS NOT NULL\nBEGIN\n    DROP VIEW DailyUserData\nEND\nGO\nexec ('\nCREATE VIEW DailyUserData as\nwith expenses as (\n    select \n        d.d as ''Date'',\n        COALESCE(cAST(SUM(e.Value) as real), 0) as ''DailyExpense'',\n        u.Id\n    from AllDates d\n        CROSS JOIN AspNetUsers u\n        LEFT JOIN Expense e on e.DateOfExpense >= d.d AND e.DateOfExpense < DATEADD(DAY, 1, d.d) AND e.OwnerId = u.Id\n    GROUP BY d.d, u.Id\n),\nincomes as (\n    select \n        d.d as ''Date'',\n        COALESCE(cAST(SUM(i.Value) as real), 0) as ''DailyIncome'',\n        u.Id\n    from AllDates d\n        CROSS JOIN AspNetUsers u\n        LEFT JOIN Income i on i.Date >= d.d AND i.Date < DATEADD(DAY, 1, d.d) AND i.OwnerId = u.Id\n    GROUP BY d.d, u.Id\n)\nSELECT e.date,e.DailyExpense, i.DailyIncome,e.Id FROM expenses e JOIN incomes i on e.Date = i.Date and e.Id = i.Id')\nGO\nIF OBJECT_ID (N'AllMonths', 'U') IS NOT NULL\nBEGIN\n    DROP TABLE AllMonths;\nEND \nGO\nCREATE TABLE AllMonths (\n    m datetime2 primary key\n)\nGO\n;with StartDate as \n(\n    SELECT CAST('20220101' as date) as StartDate\n),\nCutoffDate as\n(\n    SELECT DATEADD(DAY, -1, DATEADD(YEAR, 30, (SELECT StartDate from StartDate))) as CutoffDate\n),\nseq(n) as\n(\n    select 0 union all select n + 1 from seq\n    where n < datediff(month, (SELECT StartDate from StartDate), (SELECT CutoffDate from CutoffDate))\n),\nm(m) as \n(\n    select Dateadd(month, n, (SELECT StartDate from StartDate)) from seq\n)\nINSERT into AllMonths (m)\nselect \n    cAST(m as datetime2)\nfrom m\noption (maxrecursion 0)\nGO\nIF OBJECT_ID(N'MonthlyUserData', 'V') IS NOT NULL\nBEGIN\n    DROP VIEW MonthlyUserData;\nEND\nGO\nexec('\nCREATE VIEW MonthlyUserData as\nwith expenses as\n(\n    select \n        m.m as ''Date'',\n        COALESCE(cAST(SUM(e.Value) as real), 0) as ''MonthlyExpense'',\n        u.Id\n    from AllMonths m\n        CROSS JOIN AspNetUsers u\n        LEFT JOIN Expense e on e.DateOfExpense >= m.m AND e.DateOfExpense < DATEADD(month, 1, m.m) AND e.OwnerId = u.Id\n    GROUP by m.m,u.id\n),\nincomes as \n(\n    select \n        m.m as ''Date'',\n        COALESCE(cAST(SUM(i.Value) as real), 0) as ''MonthlyIncome'',\n        u.Id\n    from AllMonths m\n        CROSS JOIN AspNetUsers u\n        LEFT JOIN Income i on i.Date >= m.m AND i.Date < DATEADD(month, 1, m.m) AND i.OwnerId = u.Id\n    GROUP by m.m,u.id\n)\nSELECT e.date,e.MonthlyExpense, i.MonthlyIncome,e.Id FROM expenses e JOIN incomes i on e.Date = i.Date and e.Id = i.Id')\nGO\nIF OBJECT_ID (N'AllYears', 'U') IS NOT NULL\nBEGIN\n    DROP TABLE AllYears;\nEND \nGO\nCREATE TABLE AllYears (\n    y datetime2 primary key\n)\nGO\n;with StartDate as \n(\n    SELECT CAST('20220101' as date) as StartDate\n),\nCutoffDate as\n(\n    SELECT DATEADD(DAY, -1, DATEADD(YEAR, 30, (SELECT StartDate from StartDate))) as CutoffDate\n),\nseq(n) as\n(\n    select 0 union all select n + 1 from seq\n    where n < datediff(year, (SELECT StartDate from StartDate), (SELECT CutoffDate from CutoffDate))\n),\ny(y) as \n(\n    select Dateadd(year, n, (SELECT StartDate from StartDate)) from seq\n)\nINSERT into AllYears (y)\nselect \n    cAST(y as datetime2)\nfrom y\noption (maxrecursion 0)\nGO\nIF OBJECT_ID(N'YearlyUserData', 'V') IS NOT NULL\nBEGIN\n    DROP VIEW YearlyUserData\nEND\nGO\nexec ('\nCREATE VIEW YearlyUserData as\nwith expenses as\n(\n    select \n        y.y as ''Date'',\n        COALESCE(cAST(SUM(e.Value) as real), 0) as ''YearlyExpense'',\n        u.Id\n    from AllYears y\n        CROSS JOIN AspNetUsers u\n        LEFT JOIN Expense e on e.DateOfExpense >= y.y AND e.DateOfExpense < DATEADD(year, 1, y.y) AND e.OwnerId = u.Id\n    GROUP by y.y,u.id\n),\nincomes as \n(\n    select \n        y.y as ''Date'',\n        COALESCE(cAST(SUM(i.Value) as real), 0) as ''YearlyIncome'',\n        u.Id\n    from AllYears y\n        CROSS JOIN AspNetUsers u\n        LEFT JOIN Income i on i.Date >= y.y AND i.Date < DATEADD(year, 1, y.y) AND i.OwnerId = u.Id\n    GROUP by y.y,u.id\n)\nSELECT e.date,e.YearlyExpense, i.YearlyIncome,e.Id FROM expenses e JOIN incomes i on e.Date = i.Date and e.Id = i.Id')\nGO\n"
                );
        }

        /// <inheritdoc />
        protected override void Down(MigrationBuilder migrationBuilder)
        {
            migrationBuilder.Sql(
                    "GO\nIF OBJECT_ID (N'AllDates', 'U') IS NOT NULL\nBEGIN\n    DROP TABLE AllDates\nEND \nGO\nIF OBJECT_ID(N'DailyUserData', 'V') IS NOT NULL\nBEGIN\n    DROP VIEW DailyUserData\nEND\nGO\nIF OBJECT_ID (N'AllMonths', 'U') IS NOT NULL\nBEGIN\n    DROP TABLE AllMonths\nEND \nGO\nIF OBJECT_ID(N'MonthlyUserData', 'V') IS NOT NULL\nBEGIN\n    DROP VIEW MonthlyUserData\nEND\nGO\nIF OBJECT_ID (N'AllYears', 'U') IS NOT NULL\nBEGIN\n    DROP TABLE AllYears\nEND\nGO \nIF OBJECT_ID(N'YearlyUserData', 'V') IS NOT NULL\nBEGIN\n    DROP VIEW YearlyUserData\nEND\nGO\n"
                );
        }
    }
}
